#
# pppd makefile for NeXT
#
# $Orignial: Makefile.ultrix,v 1.4 1994/09/01 00:40:40 paulus Exp $
# $Id: Makefile.NeXT,v 1.1 1995/08/10 06:48:33 paulus Exp $
#

ARCHFLAGS = -arch i386 -arch m68k -arch hppa -arch sparc
#ARCHFLAGS = -arch i386 -arch m68k
BINDIR = /usr/local/ppp/bin
MANDIR = /usr/local/ppp/man

PPPDSRCS = main.c magic.c fsm.c lcp.c ipcp.c upap.c chap.c md5.c ccp.c \
	auth.c options.c sys-bsd.c sys-str.c sys-ultrix.c \
	sys-linux.c lock.c
HEADERS = callout.h pathnames.h patchlevel.h chap.h md5.h
MANPAGES = pppd.8

PPPDOBJS = main.o magic.o fsm.o lcp.o ipcp.o upap.o chap.o md5.o ccp.o \
	auth.o options.o sys-NeXT.o

# CC = gcc
DEBUG_FLAGS = -O -posix $(ARCHFLAGS)


#
# If you use white hardware, uncomment this line to get 
# around an apparent bug with ioctl.  See sys-NeXT.c for
# more information.  OK on black, but not necessary.
# Further, only necessary if you are using the NeXT supplied
# serial drivers.  The MuX driver works flawlessly (and faster).
# The new NeXT serial drivers put on NeXTAnswers also work flawlessly.
#
# For HPPA and SPARC, define FIXSIGS to get around posix bugs in
# OS release 3.2.  Problems are supposed to be fixed
# in release 3.3 (but at least for Sparc don't appear to be).
#
#

COMPILE_FLAGS = -DNO_DRAND48 -DHAS_BROKEN_IOCTL \
	-DDEBUGUPAP -DDEBUGCHAP -DDEBUGLCP -DDEBUGIPCP \
	-DFIXSIGS


COPTS = -O
LIBS =

CFLAGS = -I../NeXT -I.. $(COPTS) $(DEBUG_FLAGS) $(COMPILE_FLAGS)

SOURCE= RELNOTES Makefile \
	$(PPPDSRCS) $(HEADERS) $(MANPAGES)

all: pppd

install:
	/bin/mkdirs $(MANDIR)/man8 $(BINDIR) 
	install -c -s -m 4511 -o root -g daemon pppd $(BINDIR)/pppd
	install -c -m  444 -o root -g wheel pppd.8 $(MANDIR)/man8

pppd: $(PPPDOBJS)
	$(CC) $(CFLAGS) -o pppd $(PPPDOBJS) $(LIBS)

pppd.tar: $(SOURCE)
	tar -cvf pppd.tar $(SOURCE)

pppd.tar.Z: pppd.tar
	compress pppd.tar

clean:
	rm -f $(PPPDOBJS) pppd *~ #* core

depend:
	cpp -M $(CFLAGS) $(PPPDSRCS) >.depend
#	makedepend $(CFLAGS) $(PPPDSRCS)

saber_pppd:
	#setopt load_flags $(CFLAGS)
	#setopt ansi
	#suppress 452 md5.c
	#load $(PPPDSRCS)

